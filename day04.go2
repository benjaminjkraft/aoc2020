package main

import (
	"fmt"
	"strconv"
	"strings"
	"unicode"
)

type passport map[string]string

var requiredFields = []string{"byr", "iyr", "eyr", "hgt", "hcl", "ecl", "pid"}

func (p passport) valid1() bool {
	return ItemsEqual(Remove(Keys(p), "cid"), requiredFields)
}

func numIn(x string, min, max int) bool {
	num, err := strconv.Atoi(x)
	return err == nil && num >= min && num <= max
}

func validHeight(x string) bool {
	switch {
	case strings.HasSuffix(x, "cm"):
		return numIn(x[:len(x)-2], 150, 193)
	case strings.HasSuffix(x, "in"):
		return numIn(x[:len(x)-2], 59, 76)
	default:
		return false
	}
}

func validHCL(x string) bool {
	return len(x) == 7 && x[0] == '#' &&
		All(func(c rune) bool { return unicode.IsDigit(c) || 'a' <= c && c <= 'f' }, []rune(x[1:]))
}

var validECLs = []string{"amb", "blu", "brn", "gry", "grn", "hzl", "oth"}

func (p passport) valid2() bool {
	return p.valid1() &&
		numIn(p["byr"], 1920, 2002) &&
		numIn(p["iyr"], 2010, 2020) &&
		numIn(p["eyr"], 2020, 2030) &&
		validHeight(p["hgt"]) &&
		validHCL(p["hcl"]) &&
		Contains(validECLs, p["ecl"]) &&
		len(p["pid"]) == 9 && All(unicode.IsDigit, []rune(p["pid"]))
}

func parseItem(item string) Pair[string, string] {
	kv := strings.Split(item, ":")
	return Pair[string, string]{kv[0], kv[1]}
}

func parsePassports(input string) ([]passport, error) {
	return Map(func(block string) passport {
		return passport(ToMap(Map(parseItem, strings.Fields(block))))
	}, nonzero(strings.Split(input, "\n\n"))), nil
}

func day04a(passports []passport) (string, error) {
	return fmt.Sprint(count(func(p passport) bool { return p.valid1() }, passports)), nil
}

func day04b(passports []passport) (string, error) {
	return fmt.Sprint(count(func(p passport) bool { return p.valid2() }, passports)), nil
}
