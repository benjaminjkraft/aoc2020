package main

import (
	"fmt"
	"math"
	"strings"
)

type gridNum int

// we track edges as numbers (which are much more hashable than []bool) --
// basically we just read the bools as binary
type edgeNum int

func parseGrids(input string) (map[gridNum][][]bool, error) {
	ret := map[gridNum][][]bool{}
	for _, block := range nonzero(strings.Split(input, "\n\n")) {
		i := strings.Index(block, "\n")
		if i == -1 {
			return nil, fmt.Errorf("no header for block %v", block)
		}
		var num gridNum
		_, err := fmt.Sscanf(block[:i], "Tile %v:", &num)
		if err != nil {
			return nil, err
		}

		ret[num], err = lineParser(hashchars)(block[i+1:])
		if err != nil {
			return nil, err
		}
	}
	return ret, nil
}

func edgeToNum(bs []bool) edgeNum {
	ret := 0
	for i, b := range bs {
		if b {
			ret += 1 << i
		}
	}
	return edgeNum(ret)
}

func edgeNums(grid [][]bool) []edgeNum {
	l := len(grid)
	col := func(i int) []bool { return Map(func(xs []bool) bool { return xs[i] }, grid) }
	edges := [][]bool{grid[0], grid[l-1], col(0), col(l - 1)}
	return Map(edgeToNum, append(edges, Map(reversed[bool], edges)...))
}

// matchTopEdge returns the correctly-oriented version of g, given up is above
// it
func matchTopEdge(g, up [][]bool) [][]bool {
	i := Index(edgeNums(g), edgeToNum(up[len(up)-1]))
	switch i {
	case 0:
		return Copy2(g)
	case 1:
		return reversed(g)
	case 2:
		return transpose(g)
	case 3:
		return reversed(transpose(g))
	case 4:
		return Map(reversed[bool], g)
	case 5:
		return Map(reversed[bool], reversed(g))
	case 6:
		return Map(reversed[bool], transpose(g))
	case 7:
		return Map(reversed[bool], reversed(transpose(g)))
	default:
		panic(fmt.Sprintf("invalid index: %v", i))
	}
}

// matchLeftEdge returns the correctly-oriented version of g, given left is to
// its left
func matchLeftEdge(g, left [][]bool) [][]bool {
	return transpose(matchTopEdge(transpose(g), transpose(left)))
}

// matchLeftEdge returns the correctly-oriented version of g, given the
// edge-numbers for its lower and right neighbors
func matchDownAndRightEdges(g [][]bool, down, right edgeNum) [][]bool {
	edges := edgeNums(g)
	downI := Index(edges, down)
	rightI := Index(edges, right)
	switch downI % 4 {
	case 0:
		switch rightI % 2 {
		case 0:
			return Map(reversed[bool], reversed(g))
		case 1:
			return reversed(g)
		}
	case 1:
		switch rightI % 2 {
		case 0:
			return Map(reversed[bool], g)
		case 1:
			return Copy2(g)
		}
	case 2:
		switch rightI % 2 {
		case 0:
			return Map(reversed[bool], reversed(transpose(g)))
		case 1:
			return reversed(transpose(g))
		}
	case 3:
		switch rightI % 2 {
		case 0:
			return Map(reversed[bool], transpose(g))
		case 1:
			return transpose(g)
		}
	}
	panic(fmt.Sprintf("invalid indexes: %v %v", down, right))

}

// layout is the core of the algorithm, where we compute the overall layout of
// which grids go where.  we also fix up the orientation of each grid (in place
// in the input).
func layout(grids map[gridNum][][]bool) [][]gridNum {
	n := int(math.Sqrt(float64(len(grids))))
	if n*n != len(grids) {
		panic("non-square # of grids")
	}
	ret := Make2[gridNum](n, n)

	// compute which edges are in which grids
	var edgePairs map[edgeNum][]gridNum = MapBySlices(
		Keys(grids), func(n gridNum) []edgeNum { return edgeNums(grids[n]) })

	// convert that into grid-connections
	connects := map[gridNum][]gridNum{}
	for num, grid := range grids {
		var others []gridNum
		var otherEdges []edgeNum
		// iterate over the edges (we can skip the reversed ones) to figure
		// out which grids we are connected to (and which edges are making the
		// connection).
		for _, edge := range edgeNums(grid)[:4] {
			newOthers := Remove(edgePairs[edge], num)
			others = append(others, newOthers...)
			if len(newOthers) > 0 {
				otherEdges = append(otherEdges, edge)
			}
		}
		connects[num] = others

		// if we have only 2 grid connections, and haven't yet found a
		// corner, put us in the top-left
		if len(others) == 2 && ret[0][0] == 0 {
			ret[0][0] = num
		}
	}
	if ret[0][0] == 0 {
		panic("couldn't find corner")
	}

	// now fix up the orientation of said conrner (can't do this in the
	// loop since it mutates grids)
	topLeft := grids[ret[0][0]]
	downRight := filter(func(e edgeNum) bool { return len(edgePairs[e]) == 2 }, edgeNums(topLeft)[:4])
	// arbitrarily choose which is right/down
	grids[ret[0][0]] = matchDownAndRightEdges(topLeft, downRight[0], downRight[1])

	// fill in that right neighbor too (we could do this later, but
	// this is the only place where we have to look at the orientation
	// of a neighbor grid to decide which grid we are (rather than just
	// to decide which orientation we are) so we just do it now)
	ret[0][1] = Remove(edgePairs[downRight[1]], ret[0][0])[0]
	grids[ret[0][1]] = matchLeftEdge(grids[ret[0][1]], grids[ret[0][0]])

	used := map[gridNum]bool{
		ret[0][0]: true,
		ret[0][1]: true,
	}

	// now fill in everything else.
	for x := 0; x < n; x++ {
		for y := 0; y < n; y++ {
			if x == 0 && y < 2 {
				continue
			}

			if x > 0 && y > 0 {
				// if we have two neighbors, we are the intersection of their
				// unused neighbors
				up := ret[x-1][y]
				left := ret[x][y-1]

				us := RemoveAll(intersection(connects[left], connects[up]), used)
				if len(us) != 1 {
					panic("impossible grid")
				}

				ret[x][y] = us[0]
				grids[ret[x][y]] = matchTopEdge(grids[ret[x][y]], grids[up])

			} else if y > 0 {
				// otherwise, we are on an edge.  we do a trick: we are the
				// neighbor of our neighbor which has the fewest unused edges.
				left := ret[x][y-1]

				us := RemoveAll(connects[left], used)
				if len(us) == 0 {
					panic("impossible grid")
				}

				ret[x][y] = minBy(func(num gridNum) int { return len(connects[num]) }, us)
				grids[ret[x][y]] = matchLeftEdge(grids[ret[x][y]], grids[left])

			} else if x > 0 {
				up := ret[x-1][y]

				us := RemoveAll(connects[up], used)
				if len(us) == 0 {
					panic("impossible grid")
				}

				ret[x][y] = minBy(func(num gridNum) int { return len(connects[num]) }, us)
				grids[ret[x][y]] = matchTopEdge(grids[ret[x][y]], grids[up])

			}
			used[ret[x][y]] = true
		}
	}

	return ret
}

// stitch takes the grids and the layout and makes them into a super-grid.
func stitch(grids map[gridNum][][]bool, layout [][]gridNum) [][]bool {
	n := len(layout)
	k := len(grids[layout[0][0]]) - 2
	ret := Make2[bool](n*k, n*k)
	for x, row := range layout {
		for y, num := range row {
			for i, grow := range grids[num][1 : k+1] {
				for j, cell := range grow[1 : k+1] {
					ret[x*k+i][y*k+j] = cell
				}
			}
		}
	}
	return ret
}

func day20a(grids map[gridNum][][]bool) (int, error) {
	l := layout(grids)
	n := len(l)
	return int(l[0][0] * l[0][n-1] * l[n-1][0] * l[n-1][n-1]), nil
}

var seamonster = [][2]int{
	{1, 0}, {2, 1}, {2, 4}, {1, 5},
	{1, 6}, {2, 7}, {2, 10}, {1, 11},
	{1, 12}, {2, 13}, {2, 16}, {1, 17},
	{0, 18}, {1, 18}, {1, 19},
}

var seamonsters = [][][2]int{
	seamonster,
	Map(func(xy [2]int) [2]int { return [2]int{xy[0], 19 - xy[1]} }, seamonster),
	Map(func(xy [2]int) [2]int { return [2]int{2 - xy[0], 19 - xy[1]} }, seamonster),
	Map(func(xy [2]int) [2]int { return [2]int{2 - xy[0], xy[1]} }, seamonster),
	Map(func(xy [2]int) [2]int { return [2]int{xy[1], xy[0]} }, seamonster),
	Map(func(xy [2]int) [2]int { return [2]int{19 - xy[1], xy[0]} }, seamonster),
	Map(func(xy [2]int) [2]int { return [2]int{19 - xy[1], 2 - xy[0]} }, seamonster),
	Map(func(xy [2]int) [2]int { return [2]int{xy[1], 2 - xy[0]} }, seamonster),
}

func print2(g [][]bool) {
	for i := range g {
		for j := range g[0] {
			if g[i][j] {
				fmt.Print("#")
			} else {
				fmt.Print(".")
			}
		}
		fmt.Println()
	}
}

func day20b(grids map[gridNum][][]bool) (int, error) {
	grid := stitch(grids, layout(grids))
	nonmonsters := Copy2(grid)
	for i := range grid {
		for j := range grid[0] {
			for _, seamonster := range seamonsters {
				if All(func(xy [2]int) bool {
					x, y := i+xy[0], j+xy[1]
					return x < len(grid) && y < len(grid[0]) && grid[x][y]
				}, seamonster) {
					for _, xy := range seamonster {
						nonmonsters[i+xy[0]][j+xy[1]] = false
					}
				}
			}
		}
	}
	return sum(Map(func(row []bool) int { return count(id[bool], row) }, nonmonsters)), nil
}
