package main

import (
	"strings"
)

type Pair[T, U any] struct {
	First  T
	Second U
}

func Keys[K comparable, V any](m map[K]V) []K {
	ret := make([]K, 0, len(m))
	for k := range m {
		ret = append(ret, k)
	}
	return ret
}

func Values[K comparable, V any](m map[K]V) []V {
	ret := make([]V, 0, len(m))
	for _, v := range m {
		ret = append(ret, v)
	}
	return ret
}

func MapCopy[K comparable, V any](m map[K]V) map[K]V {
	ret := map[K]V{}
	for k, v := range m {
		ret[k] = v
	}
	return ret
}

func MapBy[K comparable, V any](vs []V, key func(V) K) map[K]V {
	ret := map[K]V{}
	for _, v := range vs {
		ret[key(v)] = v
	}
	return ret
}

func MapBySlice[K comparable, V any](vs []V, key func(V) K) map[K][]V {
	ret := map[K][]V{}
	for _, v := range vs {
		k := key(v)
		ret[k] = append(ret[k], v)
	}
	return ret
}

func MapBySlices[K comparable, V any](vs []V, keys func(V) []K) map[K][]V {
	ret := map[K][]V{}
	for _, v := range vs {
		for _, k := range keys(v) {
			ret[k] = append(ret[k], v)
		}
	}
	return ret
}

func Remove[T comparable](xs []T, x T) []T {
	m := make([]T, 0, len(xs))
	for _, y := range xs {
		if y != x {
			m = append(m, y)
		}
	}
	return m
}

func ItemsEqual[T comparable](xs, ys []T) bool {
	m := make(map[T]int, len(xs))
	for _, x := range xs {
		m[x]++
	}
	for _, y := range ys {
		m[y]--
	}
	for _, count := range m {
		if count != 0 {
			return false
		}
	}
	return true
}

func Map[T, U any](f func(T) U, xs []T) []U {
	ret := make([]U, len(xs))
	for i, x := range xs {
		ret[i] = f(x)
	}
	return ret
}

func MapE[T, U any](f func(T) (U, error), xs []T) ([]U, error) {
	var err error
	ret := make([]U, len(xs))
	for i, x := range xs {
		ret[i], err = f(x)
		if err != nil {
			return nil, err
		}
	}
	return ret, nil
}

func Concat[T any](xss [][]T) []T {
	ret := make([]T, 0, len(xss))
	for _, xs := range xss {
		for _, x := range xs {
			ret = append(ret, x)
		}
	}
	return ret
}

func ToMap[K comparable, V any](pairs []Pair[K, V]) map[K]V {
	ret := make(map[K]V, len(pairs))
	for _, p := range pairs {
		ret[p.First] = p.Second
	}
	return ret
}

func count[T any](f func(T) bool, xs []T) int {
	ret := 0
	for _, x := range xs {
		if f(x) {
			ret++
		}
	}
	return ret
}

func countEq[T comparable](x T, xs []T) int {
	return count(func(y T) bool { return x == y }, xs)
}

func filter[T any](f func(T) bool, xs []T) []T {
	ret := make([]T, 0, len(xs))
	for _, x := range xs {
		if f(x) {
			ret = append(ret, x)
		}
	}
	return ret
}

func All[T any](f func(T) bool, xs []T) bool {
	for _, x := range xs {
		if !f(x) {
			return false
		}
	}
	return true
}

func Any[T any](f func(T) bool, xs []T) bool {
	for _, x := range xs {
		if f(x) {
			return true
		}
	}
	return false
}

func Contains[T comparable](xs []T, x T) bool {
	return Any(func(t T) bool { return x == t }, xs)
}

func nonzero[T comparable](xs []T) []T {
	var z T
	return filter(func(x T) bool { return x != z }, xs)
}

func sepParser[T any](sep string) func(func(string) (T, error)) func(string) ([]T, error) {
	return func(f func(string) (T, error)) func(string) ([]T, error) {
		return func(input string) ([]T, error) {
			return MapE(f, nonzero(strings.Split(input, sep)))
		}
	}
}

func lineParser[T any](f func(string) (T, error)) func(string) ([]T, error) {
	return sepParser[T]("\n")(f)
}

func blockParser[T any](f func(string) (T, error)) func(string) ([]T, error) {
	return sepParser[T]("\n\n")(f)
}

func commaParser[T any](f func(string) (T, error)) func(string) ([]T, error) {
	return func(input string) ([]T, error) {
		return MapE(f, Map(strings.TrimSpace, strings.Split(input, ",")))
	}
}

func max(xs ...int) int {
	if len(xs) == 0 {
		panic("max of no args")
	}

	m := xs[0]
	for _, x := range xs[1:] {
		if x > m {
			m = x
		}
	}
	return m
}

func min(xs ...int) int {
	if len(xs) == 0 {
		panic("min of no args")
	}

	m := xs[0]
	for _, x := range xs[1:] {
		if x < m {
			m = x
		}
	}
	return m
}

func minBy[T any](key func(T) int, xs []T) T {
	if len(xs) == 0 {
		panic("min of no args")
	}

	m := xs[0]
	b := key(xs[0])
	for _, x := range xs[1:] {
		k := key(x)
		if k < b {
			m = x
			b = k
		}
	}
	return m
}

func RemoveAll[T comparable](xs []T, s map[T]bool) []T {
	m := make([]T, 0, len(xs))
	for _, x := range xs {
		if !s[x] {
			m = append(m, x)
		}
	}
	return m
}

func sum(xs []int) int {
	s := 0
	for _, x := range xs {
		s += x
	}
	return s
}

func id[T any](x T) T { return x }

func Copy[T any](xs []T) []T      { return Map[T, T](id[T], xs) }
func Copy2[T any](xs [][]T) [][]T { return Map[[]T, []T](Copy[T], xs) }

func mod(x, m int) int {
	r := x % m
	if r < 0 {
		r += m
	}
	return r
}

func reversed[T any](xs []T) []T {
	ret := make([]T, len(xs))
	for i, x := range xs {
		ret[len(xs)-i-1] = x
	}
	return ret
}

func uniq[T comparable](xs []T) []T {
	if len(xs) < 2 {
		return xs
	}
	ret := []T{xs[0]}
	for _, x := range xs[1:] {
		if x != ret[len(ret)-1] {
			ret = append(ret, x)
		}
	}
	return ret
}

func intersection[T comparable](xs, ys []T) []T {
	var ret []T
	for _, x := range xs {
		for _, y := range ys {
			if x == y && !Contains(ret, x) {
				ret = append(ret, x)
			}
		}
	}
	return ret
}

func Make2[T any](m, n int) [][]T {
	return Map(func(_ struct{}) []T { return make([]T, n) }, make([]struct{}, m))
}

func transpose[T any](xss [][]T) [][]T {
	ret := Make2[T](len(xss[0]), len(xss))
	for i, xs := range xss {
		for j, x := range xs {
			ret[j][i] = x
		}
	}
	return ret
}

func Index[T comparable](xs []T, x T) int {
	for i, y := range xs {
		if x == y {
			return i
		}
	}
	return -1
}
